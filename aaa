@a = global [1000 x [1000 x float]] zeroinitializer

declare void @_sysy_starttime(i32)

declare void @_sysy_stoptime(i32)

declare i32 @_sysy_getch()

declare void @_sysy_putch(i32)

declare i32 @_sysy_getint()

declare void @_sysy_putint(i32)

declare i32 @_sysy_getarray(i32*)

declare void @_sysy_putarray(i32, i32*)

declare float @_sysy_getfloat()

declare void @_sysy_putfloat(float)

declare i32 @_sysy_getfarray(float*)

declare void @_sysy_putfarray(i32, float*)

declare void @_sysy_putf(i8*)

define float @myAbs(float %x) {
entry:
  %x1 = alloca float, align 4
  store float %x, float* %x1, align 4
  %0 = load float, float* %x1, align 4
  %less = fcmp ult float %0, 0.000000e+00
  %bool_32 = zext i1 %less to i32
  %ifcond = icmp ne i32 %bool_32, 0
  br i1 %ifcond, label %then, label %else

then:                                             ; preds = %entry
  %1 = load float, float* %x1, align 4
  %fneg = fneg float %1
  store float %fneg, float* %x1, align 4
  br label %ifcont

else:                                             ; preds = %entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  %2 = load float, float* %x1, align 4
  ret float %2

useless:                                          ; No predecessors!
  unreachable
}

define double @sqrt(double %0) {
entry:
  %mid = alloca float, align 4
  %end = alloca float, align 4
  %start = alloca float, align 4
  %x = alloca float, align 4
  store double %0, float* %x, align 8
  store float 0.000000e+00, float* %start, align 4
  %1 = load float, float* %x, align 4
  store float %1, float* %end, align 4
  %2 = load float, float* %start, align 4
  %3 = load float, float* %end, align 4
  %fadd = fadd float %2, %3
  %fdiv = fdiv float %fadd, 2.000000e+00
  store float %fdiv, float* %mid, align 4
  br label %loopcond

loopcond:                                         ; preds = %ifcont, %entry
  %4 = load float, float* %mid, align 4
  %5 = load float, float* %mid, align 4
  %fmul = fmul float %4, %5
  %6 = load float, float* %x, align 4
  %fsub = fsub float %fmul, %6
  %7 = call float @myAbs(float %fsub)
  %FloatToDouble = fpext float %7 to double
  %greater = fcmp ugt double %FloatToDouble, 1.000000e-03
  %bool_32 = zext i1 %greater to i32
  %whilecond = icmp ne i32 %bool_32, 0
  br i1 %whilecond, label %loopbody, label %afterloop

loopbody:                                         ; preds = %loopcond
  %8 = load float, float* %mid, align 4
  %9 = load float, float* %mid, align 4
  %fmul1 = fmul float %8, %9
  %10 = load float, float* %x, align 4
  %greater2 = fcmp ugt float %fmul1, %10
  %bool_323 = zext i1 %greater2 to i32
  %ifcond = icmp ne i32 %bool_323, 0
  br i1 %ifcond, label %then, label %else

then:                                             ; preds = %loopbody
  %11 = load float, float* %mid, align 4
  store float %11, float* %end, align 4
  %12 = load float, float* %mid, align 4
  %13 = load float, float* %start, align 4
  %fadd4 = fadd float %12, %13
  %fdiv5 = fdiv float %fadd4, 2.000000e+00
  store float %fdiv5, float* %mid, align 4
  br label %ifcont

else:                                             ; preds = %loopbody
  %14 = load float, float* %mid, align 4
  store float %14, float* %start, align 4
  %15 = load float, float* %mid, align 4
  %16 = load float, float* %end, align 4
  %fadd6 = fadd float %15, %16
  %fdiv7 = fdiv float %fadd6, 2.000000e+00
  store float %fdiv7, float* %mid, align 4
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  br label %loopcond

afterloop:                                        ; preds = %loopcond
  %17 = load float, float* %mid, align 4
  ret float %17

useless:                                          ; No predecessors!
  unreachable
}

define i32 @main() {
entry:
  %var = alloca [1000 x float], align 4
  %mean = alloca [1000 x float], align 4
  %sum = alloca float, align 4
  %k = alloca i32, align 4
  %j = alloca i32, align 4
  %i = alloca i32, align 4
  %n = alloca i32, align 4
  store float 0.000000e+00, float* %sum, align 4
  store i32 0, i32* %i, align 4
  br label %loopcond

loopcond:                                         ; preds = %ifcont, %entry
  %0 = load i32, i32* %i, align 4
  %less = icmp slt i32 %0, 1000
  %bool_32 = zext i1 %less to i32
  %whilecond = icmp ne i32 %bool_32, 0
  br i1 %whilecond, label %loopbody, label %afterloop

loopbody:                                         ; preds = %loopcond
  %1 = load i32, i32* %i, align 4
  %2 = getelementptr inbounds [1000 x [1000 x float]], [1000 x [1000 x float]]* @a, i32 0, i32 %1
  %3 = getelementptr inbounds [1000 x float], [1000 x float]* %2, i32 0, i32 0
  %4 = call i32 @_sysy_getfarray(float* %3)
  store i32 %4, i32* %n, align 4
  %5 = load i32, i32* %n, align 4
  %neq = icmp ne i32 %5, 1000
  %bool_321 = zext i1 %neq to i32
  %ifcond = icmp ne i32 %bool_321, 0
  br i1 %ifcond, label %then, label %else

then:                                             ; preds = %loopbody
  %6 = load i32, i32* %n, align 4
  ret i32 %6

useless:                                          ; No predecessors!
  br label %ifcont

else:                                             ; preds = %loopbody
  br label %ifcont

ifcont:                                           ; preds = %else, %useless
  %7 = load i32, i32* %i, align 4
  %add = add i32 %7, 1
  store i32 %add, i32* %i, align 4
  br label %loopcond

afterloop:                                        ; preds = %loopcond
  call void @_sysy_starttime(i32 46)
  store i32 0, i32* %k, align 4
  br label %loopcond2

loopcond2:                                        ; preds = %afterloop55, %afterloop
  %8 = load i32, i32* %k, align 4
  %less3 = icmp slt i32 %8, 100
  %bool_324 = zext i1 %less3 to i32
  %whilecond5 = icmp ne i32 %bool_324, 0
  br i1 %whilecond5, label %loopbody6, label %afterloop57

loopbody6:                                        ; preds = %loopcond2
  store i32 0, i32* %i, align 4
  br label %loopcond7

loopcond7:                                        ; preds = %afterloop18, %loopbody6
  %9 = load i32, i32* %i, align 4
  %less8 = icmp slt i32 %9, 1000
  %bool_329 = zext i1 %less8 to i32
  %whilecond10 = icmp ne i32 %bool_329, 0
  br i1 %whilecond10, label %loopbody11, label %afterloop20

loopbody11:                                       ; preds = %loopcond7
  store i32 0, i32* %j, align 4
  %10 = load i32, i32* %i, align 4
  %11 = getelementptr inbounds [1000 x float], [1000 x float]* %mean, i32 0, i32 %10
  store float 0.000000e+00, float* %11, align 4
  br label %loopcond12

loopcond12:                                       ; preds = %loopbody16, %loopbody11
  %12 = load i32, i32* %j, align 4
  %less13 = icmp slt i32 %12, 1000
  %bool_3214 = zext i1 %less13 to i32
  %whilecond15 = icmp ne i32 %bool_3214, 0
  br i1 %whilecond15, label %loopbody16, label %afterloop18

loopbody16:                                       ; preds = %loopcond12
  %13 = load i32, i32* %i, align 4
  %14 = getelementptr inbounds [1000 x float], [1000 x float]* %mean, i32 0, i32 %13
  %15 = load i32, i32* %i, align 4
  %16 = getelementptr inbounds [1000 x float], [1000 x float]* %mean, i32 0, i32 %15
  %17 = load float, float* %16, align 4
  %18 = load i32, i32* %i, align 4
  %19 = getelementptr inbounds [1000 x [1000 x float]], [1000 x [1000 x float]]* @a, i32 0, i32 %18
  %20 = load i32, i32* %j, align 4
  %21 = getelementptr inbounds [1000 x float], [1000 x float]* %19, i32 0, i32 %20
  %22 = load float, float* %21, align 4
  %fadd = fadd float %17, %22
  store float %fadd, float* %14, align 4
  %23 = load i32, i32* %j, align 4
  %add17 = add i32 %23, 1
  store i32 %add17, i32* %j, align 4
  br label %loopcond12

afterloop18:                                      ; preds = %loopcond12
  %24 = load i32, i32* %i, align 4
  %25 = getelementptr inbounds [1000 x float], [1000 x float]* %mean, i32 0, i32 %24
  %26 = load i32, i32* %i, align 4
  %27 = getelementptr inbounds [1000 x float], [1000 x float]* %mean, i32 0, i32 %26
  %28 = load float, float* %27, align 4
  %fdiv = fdiv float %28, 1.000000e+03
  store float %fdiv, float* %25, align 4
  %29 = load i32, i32* %i, align 4
  %add19 = add i32 %29, 1
  store i32 %add19, i32* %i, align 4
  br label %loopcond7

afterloop20:                                      ; preds = %loopcond7
  store i32 0, i32* %i, align 4
  br label %loopcond21

loopcond21:                                       ; preds = %afterloop34, %afterloop20
  %30 = load i32, i32* %i, align 4
  %less22 = icmp slt i32 %30, 1000
  %bool_3223 = zext i1 %less22 to i32
  %whilecond24 = icmp ne i32 %bool_3223, 0
  br i1 %whilecond24, label %loopbody25, label %afterloop38

loopbody25:                                       ; preds = %loopcond21
  store i32 0, i32* %j, align 4
  %31 = load i32, i32* %i, align 4
  %32 = getelementptr inbounds [1000 x float], [1000 x float]* %var, i32 0, i32 %31
  store float 0.000000e+00, float* %32, align 4
  br label %loopcond26

loopcond26:                                       ; preds = %loopbody30, %loopbody25
  %33 = load i32, i32* %j, align 4
  %less27 = icmp slt i32 %33, 1000
  %bool_3228 = zext i1 %less27 to i32
  %whilecond29 = icmp ne i32 %bool_3228, 0
  br i1 %whilecond29, label %loopbody30, label %afterloop34

loopbody30:                                       ; preds = %loopcond26
  %34 = load i32, i32* %i, align 4
  %35 = getelementptr inbounds [1000 x float], [1000 x float]* %var, i32 0, i32 %34
  %36 = load i32, i32* %i, align 4
  %37 = getelementptr inbounds [1000 x float], [1000 x float]* %var, i32 0, i32 %36
  %38 = load float, float* %37, align 4
  %39 = load i32, i32* %i, align 4
  %40 = getelementptr inbounds [1000 x [1000 x float]], [1000 x [1000 x float]]* @a, i32 0, i32 %39
  %41 = load i32, i32* %j, align 4
  %42 = getelementptr inbounds [1000 x float], [1000 x float]* %40, i32 0, i32 %41
  %43 = load float, float* %42, align 4
  %44 = load i32, i32* %i, align 4
  %45 = getelementptr inbounds [1000 x float], [1000 x float]* %mean, i32 0, i32 %44
  %46 = load float, float* %45, align 4
  %fsub = fsub float %43, %46
  %47 = load i32, i32* %i, align 4
  %48 = getelementptr inbounds [1000 x [1000 x float]], [1000 x [1000 x float]]* @a, i32 0, i32 %47
  %49 = load i32, i32* %j, align 4
  %50 = getelementptr inbounds [1000 x float], [1000 x float]* %48, i32 0, i32 %49
  %51 = load float, float* %50, align 4
  %52 = load i32, i32* %i, align 4
  %53 = getelementptr inbounds [1000 x float], [1000 x float]* %mean, i32 0, i32 %52
  %54 = load float, float* %53, align 4
  %fsub31 = fsub float %51, %54
  %fmul = fmul float %fsub, %fsub31
  %fadd32 = fadd float %38, %fmul
  store float %fadd32, float* %35, align 4
  %55 = load i32, i32* %j, align 4
  %add33 = add i32 %55, 1
  store i32 %add33, i32* %j, align 4
  br label %loopcond26

afterloop34:                                      ; preds = %loopcond26
  %56 = load i32, i32* %i, align 4
  %57 = getelementptr inbounds [1000 x float], [1000 x float]* %var, i32 0, i32 %56
  %58 = load i32, i32* %i, align 4
  %59 = getelementptr inbounds [1000 x float], [1000 x float]* %var, i32 0, i32 %58
  %60 = load float, float* %59, align 4
  %fdiv35 = fdiv float %60, 1.000000e+03
  store float %fdiv35, float* %57, align 4
  %61 = load i32, i32* %i, align 4
  %62 = getelementptr inbounds [1000 x float], [1000 x float]* %var, i32 0, i32 %61
  %63 = load i32, i32* %i, align 4
  %64 = getelementptr inbounds [1000 x float], [1000 x float]* %var, i32 0, i32 %63
  %65 = load float, float* %64, align 4
  %FloatToDouble = fpext float %65 to double
  %fadd36 = fadd double %FloatToDouble, 1.000000e-02
  %DoubleToFloat = fptrunc double %fadd36 to float
  %66 = call double @sqrt(float %DoubleToFloat)
  store double %66, float* %62, align 8
  %67 = load i32, i32* %i, align 4
  %add37 = add i32 %67, 1
  store i32 %add37, i32* %i, align 4
  br label %loopcond21

afterloop38:                                      ; preds = %loopcond21
  store i32 0, i32* %i, align 4
  br label %loopcond39

loopcond39:                                       ; preds = %afterloop53, %afterloop38
  %68 = load i32, i32* %i, align 4
  %less40 = icmp slt i32 %68, 1000
  %bool_3241 = zext i1 %less40 to i32
  %whilecond42 = icmp ne i32 %bool_3241, 0
  br i1 %whilecond42, label %loopbody43, label %afterloop55

loopbody43:                                       ; preds = %loopcond39
  store i32 0, i32* %j, align 4
  br label %loopcond44

loopcond44:                                       ; preds = %loopbody48, %loopbody43
  %69 = load i32, i32* %j, align 4
  %less45 = icmp slt i32 %69, 1000
  %bool_3246 = zext i1 %less45 to i32
  %whilecond47 = icmp ne i32 %bool_3246, 0
  br i1 %whilecond47, label %loopbody48, label %afterloop53

loopbody48:                                       ; preds = %loopcond44
  %70 = load i32, i32* %i, align 4
  %71 = getelementptr inbounds [1000 x [1000 x float]], [1000 x [1000 x float]]* @a, i32 0, i32 %70
  %72 = load i32, i32* %j, align 4
  %73 = getelementptr inbounds [1000 x float], [1000 x float]* %71, i32 0, i32 %72
  %74 = load i32, i32* %i, align 4
  %75 = getelementptr inbounds [1000 x [1000 x float]], [1000 x [1000 x float]]* @a, i32 0, i32 %74
  %76 = load i32, i32* %j, align 4
  %77 = getelementptr inbounds [1000 x float], [1000 x float]* %75, i32 0, i32 %76
  %78 = load float, float* %77, align 4
  %79 = load i32, i32* %i, align 4
  %80 = getelementptr inbounds [1000 x float], [1000 x float]* %mean, i32 0, i32 %79
  %81 = load float, float* %80, align 4
  %fsub49 = fsub float %78, %81
  %82 = load i32, i32* %i, align 4
  %83 = getelementptr inbounds [1000 x float], [1000 x float]* %var, i32 0, i32 %82
  %84 = load float, float* %83, align 4
  %fdiv50 = fdiv float %fsub49, %84
  store float %fdiv50, float* %73, align 4
  %85 = load float, float* %sum, align 4
  %86 = load i32, i32* %i, align 4
  %87 = getelementptr inbounds [1000 x [1000 x float]], [1000 x [1000 x float]]* @a, i32 0, i32 %86
  %88 = load i32, i32* %j, align 4
  %89 = getelementptr inbounds [1000 x float], [1000 x float]* %87, i32 0, i32 %88
  %90 = load float, float* %89, align 4
  %fadd51 = fadd float %85, %90
  store float %fadd51, float* %sum, align 4
  %91 = load i32, i32* %j, align 4
  %add52 = add i32 %91, 1
  store i32 %add52, i32* %j, align 4
  br label %loopcond44

afterloop53:                                      ; preds = %loopcond44
  %92 = load i32, i32* %i, align 4
  %add54 = add i32 %92, 1
  store i32 %add54, i32* %i, align 4
  br label %loopcond39

afterloop55:                                      ; preds = %loopcond39
  %93 = load i32, i32* %k, align 4
  %add56 = add i32 %93, 1
  store i32 %add56, i32* %k, align 4
  br label %loopcond2

afterloop57:                                      ; preds = %loopcond2
  store i32 0, i32* %i, align 4
  br label %loopcond58

loopcond58:                                       ; preds = %afterloop70, %afterloop57
  %94 = load i32, i32* %i, align 4
  %less59 = icmp slt i32 %94, 1000
  %bool_3260 = zext i1 %less59 to i32
  %whilecond61 = icmp ne i32 %bool_3260, 0
  br i1 %whilecond61, label %loopbody62, label %afterloop72

loopbody62:                                       ; preds = %loopcond58
  store i32 0, i32* %j, align 4
  br label %loopcond63

loopcond63:                                       ; preds = %loopbody67, %loopbody62
  %95 = load i32, i32* %j, align 4
  %less64 = icmp slt i32 %95, 1000
  %bool_3265 = zext i1 %less64 to i32
  %whilecond66 = icmp ne i32 %bool_3265, 0
  br i1 %whilecond66, label %loopbody67, label %afterloop70

loopbody67:                                       ; preds = %loopcond63
  %96 = load float, float* %sum, align 4
  %97 = load i32, i32* %i, align 4
  %98 = getelementptr inbounds [1000 x [1000 x float]], [1000 x [1000 x float]]* @a, i32 0, i32 %97
  %99 = load i32, i32* %j, align 4
  %100 = getelementptr inbounds [1000 x float], [1000 x float]* %98, i32 0, i32 %99
  %101 = load float, float* %100, align 4
  %fadd68 = fadd float %96, %101
  store float %fadd68, float* %sum, align 4
  %102 = load i32, i32* %j, align 4
  %add69 = add i32 %102, 1
  store i32 %add69, i32* %j, align 4
  br label %loopcond63

afterloop70:                                      ; preds = %loopcond63
  %103 = load i32, i32* %i, align 4
  %add71 = add i32 %103, 1
  store i32 %add71, i32* %i, align 4
  br label %loopcond58

afterloop72:                                      ; preds = %loopcond58
  call void @_sysy_stoptime(i32 99)
  %104 = load float, float* %sum, align 4
  call void @_sysy_putfloat(float %104)
  ret i32 0

useless73:                                        ; No predecessors!
  unreachable
}