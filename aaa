`-FunctionDecl 0x6ec368 <line:25:1, line:83:1> line:25:5 main 'int ()'
  `-CompoundStmt 0x6efc60 <col:12, line:83:1>
    |-DeclStmt 0x6ec538 <line:26:3, col:11>
    | |-VarDecl 0x6ec438 <col:3, col:7> col:7 used t 'int'
    | `-VarDecl 0x6ec4b8 <col:3, col:10> col:10 used m 'int'
    |-DeclStmt 0x6ec668 <line:27:3, col:11>
    | |-VarDecl 0x6ec568 <col:3, col:7> col:7 used a 'int'
    | `-VarDecl 0x6ec5e8 <col:3, col:10> col:10 used b 'int'
    |-BinaryOperator 0x6ec6d8 <line:28:3, col:7> 'int' '='
    | |-DeclRefExpr 0x6ec680 <col:3> 'int' lvalue Var 0x6ec438 't' 'int'
    | `-IntegerLiteral 0x6ec6b8 <col:7> 'int' 1
    |-WhileStmt 0x6efc10 <line:29:3, line:81:3>
    | |-ImplicitCastExpr 0x6ec718 <line:29:10> 'int' <LValueToRValue>
    | | `-DeclRefExpr 0x6ec6f8 <col:10> 'int' lvalue Var 0x6ec438 't' 'int'
    | `-CompoundStmt 0x6efbb8 <col:13, line:81:3>
    |   |-BinaryOperator 0x6ec7c8 <line:30:5, col:13> 'int' '='
    |   | |-DeclRefExpr 0x6ec730 <col:5> 'int' lvalue Var 0x6ec438 't' 'int'
    |   | `-BinaryOperator 0x6ec7a8 <col:9, col:13> 'int' '-'
    |   |   |-ImplicitCastExpr 0x6ec790 <col:9> 'int' <LValueToRValue>
    |   |   | `-DeclRefExpr 0x6ec750 <col:9> 'int' lvalue Var 0x6ec438 't' 'int'
    |   |   `-IntegerLiteral 0x6ec770 <col:13> 'int' 1
    |   |-BinaryOperator 0x6ec828 <line:31:5, col:9> 'int' '='
    |   | |-DeclRefExpr 0x6ec7e8 <col:5> 'int' lvalue Var 0x6e69a0 'n' 'int'
    |   | `-IntegerLiteral 0x6ec808 <col:9> 'int' 4
    |   |-BinaryOperator 0x6ec8a0 <line:32:5, col:9> 'int' '='
    |   | |-DeclRefExpr 0x6ec848 <col:5> 'int' lvalue Var 0x6ec4b8 'm' 'int'
    |   | `-IntegerLiteral 0x6ec880 <col:9> 'int' 10
    |   |-DeclStmt 0x6ec960 <line:33:5, col:14>
    |   | `-VarDecl 0x6ec8d8 <col:5, col:13> col:9 used i 'int' cinit
    |   |   `-IntegerLiteral 0x6ec940 <col:13> 'int' 0
    |   |-DeclStmt 0x6eca18 <line:34:5, col:17>
    |   | `-VarDecl 0x6ec990 <col:5, col:16> col:9 used flag 'int' cinit
    |   |   `-IntegerLiteral 0x6ec9f8 <col:16> 'int' 0
    |   |-CallExpr 0x6ecab8 <line:35:5, col:11> 'void'
    |   | |-ImplicitCastExpr 0x6ecaa0 <col:5> 'void (*)(int)' <FunctionToPointerDecay>
    |   | | `-DeclRefExpr 0x6eca30 <col:5> 'void (int)' Function 0x6e6ae0 'init' 'void (int)'
    |   | `-ImplicitCastExpr 0x6ecae0 <col:10> 'int' <LValueToRValue>
    |   |   `-DeclRefExpr 0x6eca50 <col:10> 'int' lvalue Var 0x6e69a0 'n' 'int'
    |   |-DeclStmt 0x6ecc48 <line:36:5, col:22>
    |   | `-VarDecl 0x6ecb10 <col:5, col:21> col:9 used k 'int' cinit
    |   |   `-BinaryOperator 0x6ecc28 <col:13, col:21> 'int' '+'
    |   |     |-BinaryOperator 0x6ecbe8 <col:13, col:17> 'int' '*'
    |   |     | |-ImplicitCastExpr 0x6ecbb8 <col:13> 'int' <LValueToRValue>
    |   |     | | `-DeclRefExpr 0x6ecb78 <col:13> 'int' lvalue Var 0x6e69a0 'n' 'int'
    |   |     | `-ImplicitCastExpr 0x6ecbd0 <col:17> 'int' <LValueToRValue>
    |   |     |   `-DeclRefExpr 0x6ecb98 <col:17> 'int' lvalue Var 0x6e69a0 'n' 'int'
    |   |     `-IntegerLiteral 0x6ecc08 <col:21> 'int' 1
    